package swea;
/*
import java.util.StringTokenizer;
import java.util.Stack;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
public class p1218 {
	
	public static String left = "([{<";
	public static String right = ")]}>";
	public static void main(String[] args) throws IOException {
		int T;
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		T = 10;
		for(int tc=1; tc<=T; tc++) {
			
			int N;
			N = Integer.parseInt(bf.readLine());
			String s;
			s = bf.readLine();
			
			Stack<Character> stack = new Stack<Character>();
			
			boolean ans = true;
			int idx;
			for(int i=0; i<N; i++) {
				if((idx = left.indexOf(s.charAt(i))) != -1) stack.push(s.charAt(i));
				else {
					idx = right.indexOf(s.charAt(i));
					if(stack.empty() || stack.pop() != left.charAt(idx)) {
						ans = false;
						break;
					}
				}
			}
			
			if(!stack.empty()) ans = false;
			System.out.println("#" + tc + " " + (ans ? 1 : 0));
		}
	}

}
*/

import java.util.Scanner;
import java.util.Stack;

public class p1218 {

	static Stack<Character> stack = new Stack<>();
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);

		for (int t = 1; t <= 10; t++) {
			
			stack.clear();
			
			int N = sc.nextInt();
			String str = sc.next();
			
			int answer = 0;
			
			for (int i = 0; i < N; i++) {
				
				char token = str.charAt(i);
				
				if( token == '<' || token == '{' || token == '(' || token == '[' ) {
					
					stack.push(token);
					
				}else {
					
					if (!stack.isEmpty()) {
						
						char prev = stack.peek();
						
						if (token == '>' && prev != '<') {
							break;
						}else if (token == ']' && prev != '[') {
							break;
						}else if (token == '}' && prev != '{') {
							break;
						}else if (token == ')' && prev != '(') {
							break;
						}else {
							stack.pop();
						}
					}
				}
			}
			
			if( stack.isEmpty() ) answer = 1;
			
			System.out.println("#" + t + " " + answer);
		}
		
		sc.close();
	}
}

/*
https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14eWb6AAkCFAYD&
*/

/*

182
(({<(({{[[[[<<[[(<[[{([{{{[<[[[{<<(<[[{}[]{}{}[]]]><><>{})[]{}><>[]<>><>}][]]<>{}]>]()}()()(){}}}{}][])(){}<>()}]{}[]]>()[][][]){}]]{}[]<>><>{}[]{}<>>]]]][]{}{}[]()}}))>}<>{}()))[][]
298
{({{[({([{(<[([(([<({[{{[[({{[({([<{(<[[(<((<[{[<[([((<{{[([{<<[{(<({[<{}()>[]<>][]})>[])<>()[]}]>><>(){}()[]}]{}()<>[]<>)<>{}<>{}{}]}()}<>>)[]){}])]>[][]{}]()}][]()>[]))[]>)]][]>)[]{}}[]<><>>]()[])}{}){}]}}<><>){}][]{}{}]<>[]}(){}<>}][]})[]()><>]))])]>{}{}())}{}])<>}{})]{}{}}[])())<>{}[]<><>}[]{}
230
[({([<[<[<<(([{([<((({<{([{[<[<<<([<[<([[{([<[{({([<(<[[][]]<>{}<>[]>){}{}<>>]{}())})}[]]{}>[][][]]()[][]<><>()<>){}}]])[][][]>]>()](){}[])>>><><>{}]>]{}[]}<>][]())}[][]>}<>)()))>{}[]()])[][]}]<>()<>))>>()][]>][][]>]())}<><>{}<>)]
226
[[[{{[[<[([((([({{[{<<([[[([[{<[{{<{[<[([<<<((([{(<({<([(<><>){}])()[]>}<>())>){}}]))){}>()<><>>>[]]<>)]>]{}()}(){}>()<><>}}]()>}<>{}]])<>{}]()(){}][]()])[]{}(){}<>>[]>}{}{}](){}}})()])(){}<>))][])[]()<>]<><>>]()][]{}}}[]]]]()
242
((([<[{{<[<{<{({(({({({<{{{((([{[({[{<{{(([[{([{<<({<[]>}){}[]()()>>}[][]()][]<>){}<>}]]))}[]}()><>[]}(){}]()[][][]})]<>}{}<>](){}){}){})<><><>{}<>[]}}<>{}{}}{}[]>{}}(){}){}<>})}))[]})()}>[]{}{}()}>]>{}[][][][]}}][][][]{}<>>][])()[]))()()[]{}
138
{[<(({[{(({[(({{{]{<[([[({[[[[<>]]]{}]{}})]]()<>{}{}<>()<>)()<>{}[]<>]>{}})<>()<><><>}{}}}())){}]}))}()<>()[]{}]})<><><><>)>[][][]]}<>[]{}
238
{<[[({[([{{(({{((<({(<{{([<{<([((<<(<{[<<([{{[<[{<{{{[<[{<{[[]]}()[][]}()}]>]}{}{}}<>[]<>{}(){}}>}]{}{}><>[]]}[]{}()[]{}}]{}())()<><>()>>]()<>}>{}[])<>()>>()))()])>{}}>])}{}{}}>)()<>[]}){}>)<>)()}}())){}<>()}[][]}]){}<>[]<>]}[])]()]()>}<>
272
([{[<[[([([{[[([[({([(<[[[<{(({<([{([{<{[<<((({(<{<[({<{<<([[{<[[{{[<(([{}])<>)[]>]()<>}<>}[]]]{}()>}][]]{})<>{}[]>>}>{}<>}{})()]<>><>}[][]>)<>{}}[]<>))){}[]>>[]]}[]>}][])[]}]())>[]{}{}}[]{}))}>(){}[]{}]<>{}]]()>)<><><><>[]])}{})[]()]])]]}])<>][]{}<>)()]<><>()]>]<>}<>()])
218
[{({[<{[<{[[[<[{[[[[{([{[<[[<<[{{((<[([[<[(<[({}[]<>[]()[]()(){}){})<>()>[][]<>[])<><>[](){}[]{}<>]><>]])]>[]){}<>)[][]}}<><>()<>]<>><>{}>[]<>]{}]>]<>}]{}())[]}[]]<>]]]}]()>]<>(){}]()<>()]()}>{}<>]{}}>]()[]()[]})()}]()
258
({{[({<{<<{{([[<{({{{[[({[<(<{<<{<<{{{{([{[{<{{[<<[[[<[{<(<[({(<>)})]><>[])()>{}}[]]{}<>><>]]]<>>{}>]}{}[]}>}]<>[]}]){}<>{}}[]}}}{}<>>>}>[]><><>()<>[]}><>)><><><>]}){}]]<>[]<>}[]<>{}}}()<>)}<>{}[]>][]{}])<>[][]{}}()}>[]<>>}<><>>()}{}<><>[]()())<>]}{}{}[]}[])

#1 1
#2 0
#3 1
#4 1
#5 1
#6 0
#7 0
#8 1
#9 0
#10 1
*/


/*
개선사항
  ((( 와 같은 문자열 입력이어도 false - 0 처리 <-- 최종적으로 stack 이 비어야 true - 1
  stack.clear()
*/                 

